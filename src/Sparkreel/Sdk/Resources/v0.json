{
    "name": "Sparkreel",
    "apiVersion": "1.0",
    "base_url": "https://api.sparkreel.com/v1",
    "description": "Sparkreel REST API client",
    "operations": {
        "GetGroupVideos": {
            "httpMethod": "GET",
            "uri": "videos",
            "summary": "Returns videos for the group associated with the api key.",
            "parameters": {
                "format": {
                    "description": "Specifies the format of the response, json or xml, right now only json",
                    "type": "string",
                    "location": "query",
                    "default": "json"
                },
                "page": {
                    "description": "The requested page",
                    "type": "integer",
                    "location": "query",
                    "default": 1
                },
                "per_page": {
                    "description": "The number of videos per page",
                    "type": "integer",
                    "location": "query",
                    "default": 10
                },
                "moderation_status": {
                    "description": "The modaration status",
                    "type": "string",
                    "location": "query",
                    "enum": ["pending", "accepted", "rejected"],
                    "default": "accepted"
                },
                "status": {
                    "description": "The video processing status",
                    "type": "string",
                    "location": "query",
                    "enum": ["pending", "processing", "ready", "error"],
                    "default": "ready"
                },
                "sort_field": {
                    "description": "The field to order videos by",
                    "type": "string",
                    "location": "query",
                    "enum": ["date", "views", "title"],
                    "default": "date"
                },
                "sort_direction": {
                    "description": "The the direction in which to order videis",
                    "type": "string",
                    "location": "query",
                    "enum": ["asc", "desc"],
                    "default": "asc"
                },
                "ids": {
                    "description": "The ids of the videos you want returned.",
                    "type": "string",
                    "location": "query",
                    "default": ""
                }
            }
        },
        "GetGroupVideosByTag": {
            "httpMethod": "GET",
            "uri": "tag/{tag}",
            "summary": "Returns videos for the group associated with the api key tagged with tag.",
            "parameters": {
                "format": {
                    "description": "Specifies the format of the response, json or xml, right now only json",
                    "type": "string",
                    "location": "query",
                    "default": "json"
                },
                "page": {
                    "description": "The requested page",
                    "type": "integer",
                    "location": "query",
                    "default": 1
                },
                "per_page": {
                    "description": "The number of videos per page",
                    "type": "integer",
                    "location": "query",
                    "default": 10
                },
                "moderation_status": {
                    "description": "The modaration status",
                    "type": "string",
                    "location": "query",
                    "enum": ["pending", "accepted", "rejected"],
                    "default": "accepted"
                },
                "status": {
                    "description": "The video processing status",
                    "type": "string",
                    "location": "query",
                    "enum": ["pending", "processing", "ready", "error"],
                    "default": "ready"
                },
                "sort_field": {
                    "description": "The field to order videos by",
                    "type": "string",
                    "location": "query",
                    "enum": ["date", "views", "title"],
                    "default": "date"
                },
                "sort_direction": {
                    "description": "The the direction in which to order videis",
                    "type": "string",
                    "location": "query",
                    "enum": ["asc", "desc"],
                    "default": "asc"
                },
                "tag": {
                    "description": "The tag to filter videos by.",
                    "type": "string",
                    "location": "uri",
                    "required": true
                }
            }
        },
        "AddVideoTag": {
            "httpMethod": "POST",
            "uri": "video/{id}/tag",
            "summary": "Add tag to video.",
            "parameters": {
                "id": {
                    "description": "The id of the video",
                    "type": "integer",
                    "location": "uri"
                },
                "tag": {
                    "description": "The tag to fadd.",
                    "type": "string",
                    "location": "query",
                    "required": true
                }
            }
        },
        "RemoveVideoTag": {
            "httpMethod": "DELETE",
            "uri": "video/{id}/tag",
            "summary": "Remove a tag from a video.",
            "parameters": {
                "id": {
                    "description": "The id of the video",
                    "type": "integer",
                    "location": "uri"
                },
                "tag": {
                    "description": "The tag to remove.",
                    "type": "string",
                    "location": "query",
                    "required": true
                }
            }
        },
        "ClearVideoTags": {
            "httpMethod": "DELETE",
            "uri": "video/{id}/tags",
            "summary": "Clear tags from a video.",
            "parameters": {
                "id": {
                    "description": "The id of the video",
                    "type": "integer",
                    "location": "uri"
                }
            }
        },
        "GetGroupMembers": {
            "httpMethod": "GET",
            "uri": "members",
            "summary": "Returns all the members for the group associated with the api key.",
            "parameters": {

            }
        },
        "GetGroupTags": {
            "httpMethod": "GET",
            "uri": "group/tags",
            "summary": "Returns all the tags for the group associated with the api key.",
            "parameters": {

            }
        },
        "GetVideo": {
            "httpMethod": "GET",
            "uri": "video/{id}/embed",
            "summary": "Returns the specified video's data.",
            "parameters": {
                "id": {
                    "description": "The id of the video",
                    "type": "integer",
                    "location": "uri"
                },
                "width": {
                    "description": "The width of the player.",
                    "type": "integer",
                    "location": "query"
                },
                "height": {
                    "description": "The width of the player.",
                    "type": "integer",
                    "location": "query"
                },
                "autoplay": {
                    "description": "Wheather to autoplay or not.",
                    "type": "integer",
                    "location": "query"
                },
                "extra": {
                    "description": "Whether to return extra oembed info.",
                    "type": "boolean",
                    "location": "query"
                }
            }
        },
        "PublishNonMemberContent": {
            "httpMethod": "POST",
            "uri": "video",
            "summary": "Posts a content as non member to the group associated with the api key.",
            "parameters": {
                "user_email": {
                    "description": "The mail address of the content publisher",
                    "type": "string",
                    "location": "postField",
                    "required": true
                },
                "title": {
                    "description": "The content's title",
                    "type": "string",
                    "location": "postField",
                    "default": ""
                },
                "description": {
                    "description": "The content's description",
                    "type": "string",
                    "location": "postField",
                    "default": ""
                },
                "video_file": {
                    "description": "The video file location, if you are posting a SparkReel video",
                    "type": "string",
                    "location": "postFile",
                    "required": false,
                    "name": "file"
                },
                "external_url": {
                    "description": "The URL to the 3rd-party video, if you are posting a 3rd party video",
                    "type": "string",
                    "location": "postField",
                    "required": false
                }
            }
        },
        "PublishMemberContent": {
            "httpMethod": "POST",
            "uri": "video",
            "summary": "Posts a content as member to the group associated with the api key.",
            "parameters": {
                "oauth_access_token": {
                    "description": "OAuth access token for the user you are posting on behalf of",
                    "type": "string",
                    "location": "postField",
                    "required": true
                },
                "title": {
                    "description": "The content's title",
                    "type": "string",
                    "location": "postField",
                    "default": ""
                },
                "description": {
                    "description": "The content's description",
                    "type": "string",
                    "location": "postField",
                    "default": ""
                },
                "video_file": {
                    "description": "The video file location, if you are posting a SparkReel video",
                    "type": "string",
                    "location": "postFile",
                    "required": false,
                    "name": "file"
                },
                "external_url": {
                    "description": "The URL to the 3rd-party video, if you are posting a 3rd party video",
                    "type": "string",
                    "location": "postField",
                    "required": false
                }
            }
        },
        "UpdateGroup": {
            "httpMethod": "PUT",
            "uri": "group",
            "summary": "Updates settings for your group",
            "parameters": {
                "title": {
                    "description": "The title of your group",
                    "type": "string",
                    "location": "postField"
                },
                "description": {
                    "description": "The description of your group",
                    "type": "string",
                    "location": "postField"
                },
                "submission": {
                    "description": "Submission type",
                    "type": "string",
                    "enum": ["automatic", "moderated"],
                    "location": "postField"
                },
                "current_tag": {
                    "description": "Current Auto Tag",
                    "type": "string",
                    "location": "postField"
                },
                "config": {
                    "description": "Additional settings for your group",
                    "type": "object",
                    "location": "postField",
                    
                    "parameters": {
                      "watermark_url": {
                        "description": "The http(s) url of the watermark to use on videos",
                        "type": "string",
                        "location": "postField"
                      },
                      "endframe_desktop_html": {
                        "description": "HTML to use for the desktop endframe",
                        "type": "string",
                        "location": "postField"
                      },
                      "endframe_mobile_html": {
                        "description": "HTML to use for the mobile endframe",
                        "type": "string",
                        "location": "postField"
                      },
                      "email_domain": {
                        "description": "Domain to use for sending videos to SparkReel via e-mail",
                        "type": "string",
                        "location": "postField"
                      }
                    }
                }
            }
        },
        "GetGroupInfo": {
            "httpMethod": "GET",
            "uri": "group",
            "summary": "Returns info for the group associated with the api key."
        },
        "DeleteVideo": {
            "httpMethod": "DELETE",
            "uri": "video/{id}",
            "summary": "Returns videos for the group associated with the api key.",
            "parameters": {
                "id": {
                    "description": "ID of the video you want to delete",
                    "type": "integer",
                    "location": "uri",
                    "required": true
                }
            }
        },
        "UpdateVideo": {
            "httpMethod": "PUT",
            "uri": "video/{id}",
            "summary": "Updates video properties",
            "parameters": {
                "id": {
                    "description": "ID of the video you want to update",
                    "type": "integer",
                    "location": "uri"
                },
                "title": {
                    "description": "Title of the video",
                    "type": "string",
                    "location": "postField"
                },
                "description": {
                    "description": "Description of the video",
                    "type": "string",
                    "location": "postField"
                },
                "status": {
                    "description": "Moderation status of the video",
                    "type": "string",
                    "enum": ["pending", "accepted", "rejected"],
                    "location": "postField"
                }
            }
        },
        "GetVideoComments": {
            "httpMethod": "GET",
            "uri": "video/{id}/comments",
            "summary": "Get comments for a specific video",
            "parameters": {
                "id": {
                  "description": "ID of the video you want to get comments for",
                  "type": "integer",
                  "location": "uri",
                  "required": true
                },
                "page": {
                    "description": "The requested page",
                    "type": "integer",
                    "location": "query",
                    "default": 1
                },
                "per_page": {
                    "description": "The number of comments per page",
                    "type": "integer",
                    "location": "query",
                    "default": 10
                }
            }
        },
        "PostComment": {
            "httpMethod": "POST",
            "uri": "video/{id}/comments",
            "summary": "Post a comment on behalf of a user",
            "parameters": {
                "id": {
                  "description": "ID of the video you want to submit the comment for",
                  "type": "integer",
                  "location": "uri",
                  "required": true
                },
                "oauth_access_token": {
                    "description": "OAuth access token for the user you are posting on behalf of",
                    "type": "string",
                    "location": "postField",
                    "required": true
                },
                "comment_text": {
                    "description": "Text of the comment",
                    "type": "string",
                    "location": "postField",
                    "required": true
                },
                "reply_to": {
                    "description": "ID of the comment you are replying to, if any",
                    "type": "integer",
                    "location": "postField"
                }
            }
        },
        "GetExternalProviderInfo": {
            "httpMethod": "GET",
            "uri": "external-provider/info",
            "summary": "Returns info for the url set.",
            "parameters": {
                "url": {
                    "description": "The url to get info for",
                    "type": "string",
                    "location": "query",
                    "required": true
                }
            }
        },
        "GetUser": {
            "httpMethod": "GET",
            "uri": "user",
            "summary": "Get a users data",
            "parameters": {
                "id": {
                    "description": "ID of the user to data for",
                    "type": "integer",
                    "location": "query",
                    "required": false
                },
                "username": {
                    "description": "Email of the user to data for",
                    "type": "string",
                    "location": "query",
                    "required": false
                }
            }
        },
        "GetCurrentUser": {
            "httpMethod": "GET",
            "uri": "user",
            "summary": "Get the currently logged in user data",
            "parameters": {
                "oauth_access_token": {
                    "description": "OAuth access token for the user",
                    "type": "string",
                    "location": "query",
                    "required": true
                }
            }
        },
        "UpdateCurrentUser": {
            "httpMethod": "PUT",
            "uri": "user",
            "summary": "Update the currently logged in user data",
            "parameters": {
                "oauth_access_token": {
                    "description": "OAuth access token for the user",
                    "type": "string",
                    "location": "query",
                    "required": true
                },
                "name": {
                    "description": "Full Name",
                    "type": "string",
                    "location": "postField"
                },
                "email": {
                    "description": "Email address",
                    "type": "string",
                    "location": "postField"
                },
                "quote": {
                    "description": "Proile quote",
                    "type": "string",
                    "location": "postField"
                },
                "location": {
                    "description": "Location",
                    "type": "string",
                    "location": "postField"
                },
                "facebook": {
                    "description": "Facebook Profile",
                    "type": "string",
                    "location": "postField"
                },
                "twitter": {
                    "description": "Twitter Profile",
                    "type": "string",
                    "location": "postField"
                },
                "youtube": {
                    "description": "Youtube Channel",
                    "type": "string",
                    "location": "postField"
                },
                "other_link": {
                    "description": "Other Social Link",
                    "type": "string",
                    "location": "postField"
                },
                "email_subscription": {
                    "description": "Email Notifications Toggle",
                    "type": "integer",
                    "location": "postField"
                }

            }
        },
        "PostUserAvatar": {
            "httpMethod": "POST",
            "uri": "user/avatar",
            "summary": "Update the currently logged in user avatar",
            "parameters": {
                "oauth_access_token": {
                    "description": "OAuth access token for the user",
                    "type": "string",
                    "location": "query",
                    "required": true
                },
                "avatar_file": {
                    "description": "The avatar file location",
                    "type": "string",
                    "location": "postFile",
                    "required": false,
                    "name": "file"
                }
            }
        },
        "GetTopTen": {
            "httpMethod": "GET",
            "uri": "user/topten",
            "summary": "Get the ten users by number of views for this group",
            "parameters": {
            }
        }
    },
    "models": {
        "GetMentionsOutput": {
            "type": "object",
            "additionalProperties": {
                "location": "json"
            }
        }
    }
}